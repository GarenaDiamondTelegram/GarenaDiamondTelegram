#!/usr/bin/env python3
"""
ü§ñ Telegram Bot –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ Garena Diamond Game

–≠—Ç–æ—Ç –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ Telegram Stars –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã.
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–Ω–æ:
1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
2. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiogram
4. –ó–∞–º–µ–Ω–∏—Ç—å BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
"""

import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
WEBHOOK_URL = "https://your-game-url.com/api/webhook"  # URL –≤–∞—à–µ–π –∏–≥—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üíé –¢–æ–≤–∞—Ä—ã –≤ –∏–≥—Ä–µ
GAME_ITEMS = {
    'speed': {
        'name': 'üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç–∞–ø–æ–≤ x2',
        'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–∞–ø–æ–≤ –≤ 2 —Ä–∞–∑–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç',
        'price': 100
    },
    'diamonds': {
        'name': 'üíé –£—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–ª–º–∞–∑—ã x3', 
        'description': '–£—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤ –Ω–∞ 1 —á–∞—Å',
        'price': 200
    },
    'energy': {
        'name': '‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è +50',
        'description': '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏',
        'price': 10  # –í TON –µ–¥–∏–Ω–∏—Ü–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ Stars
    },
    'mega': {
        'name': 'üî• –ú–µ–≥–∞ –±—É—Å—Ç x5',
        'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Å–µ –±–æ–Ω—É—Å—ã –≤ 5 —Ä–∞–∑ –Ω–∞ 2 —á–∞—Å–∞',
        'price': 50  # –í TON –µ–¥–∏–Ω–∏—Ü–∞—Ö
    },
    'vip': {
        'name': 'üëë VIP –°—Ç–∞—Ç—É—Å',
        'description': '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏',
        'price': 200  # –í TON –µ–¥–∏–Ω–∏—Ü–∞—Ö
    }
}

@dp.message(Command('start'))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", url="https://your-game-url.com")],
            [InlineKeyboardButton(text="üí∞ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="test_payments")]
        ])
        
        await message.answer(
            "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Garena Diamond Game!</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∏–≥—Ä—ã.\n"
            "–î–ª—è –ø–æ–∫—É–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–≥—Ä–µ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: currency_category_itemtype_price_userid
    if len(args[0].split('_')) >= 5:
        params = args[0].split('_')
        currency, category, item_type, price, user_id = params[:5]
        
        if currency == 'stars' and item_type in GAME_ITEMS:
            await send_stars_invoice(message, item_type, category, user_id)
        elif currency == 'ton' and item_type in GAME_ITEMS:
            await send_ton_invoice(message, item_type, category, user_id)
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–∞–ª—é—Ç–∞")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞")

async def send_stars_invoice(message: types.Message, item_type: str, category: str, user_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã Telegram Stars"""
    item = GAME_ITEMS[item_type]
    
    prices = [LabeledPrice(label=item['name'], amount=item['price'])]
    
    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"‚≠ê {item['name']}",
            description=item['description'],
            payload=f"stars_{category}_{item_type}_{user_id}_{message.date.timestamp()}",
            provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
            currency="XTR",
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False,
            start_parameter=f"stars_{category}_{item_type}_{item['price']}"
        )
        
        await message.answer(
            f"üí´ <b>–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"–¢–æ–≤–∞—Ä: {item['name']}\n"
            f"–¶–µ–Ω–∞: {item['price']} ‚≠ê Stars\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Pay' –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating invoice: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")

async def send_ton_invoice(message: types.Message, item_type: str, category: str, user_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è TON (—á–µ—Ä–µ–∑ Stars –¥–ª—è –¥–µ–º–æ)"""
    item = GAME_ITEMS[item_type]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ Stars –¥–ª—è –¥–µ–º–æ (1 TON = 100 Stars)
    stars_price = item['price'] * 100
    prices = [LabeledPrice(label=item['name'], amount=stars_price)]
    
    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"üíé {item['name']} (TON)",
            description=f"{item['description']}\n\nüí° –î–µ–º–æ: –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stars –≤–º–µ—Å—Ç–æ TON",
            payload=f"ton_{category}_{item_type}_{user_id}_{message.date.timestamp()}",
            provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
            currency="XTR",
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False,
            start_parameter=f"ton_{category}_{item_type}_{item['price']}"
        )
        
        await message.answer(
            f"üíé <b>TON –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"–¢–æ–≤–∞—Ä: {item['name']}\n"
            f"–¶–µ–Ω–∞: {item['price']} TON (= {stars_price} ‚≠ê –≤ –¥–µ–º–æ)\n\n"
            f"üîß –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π TON –ø–ª–∞—Ç–µ–∂",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating TON invoice: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –∏–Ω–≤–æ–π—Å–∞: {e}")

@dp.callback_query(lambda c: c.data == "test_payments")
async def test_payments_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –¢–µ—Å—Ç 100 ‚≠ê", callback_data="test_stars_speed")],
        [InlineKeyboardButton(text="üíé –¢–µ—Å—Ç 200 ‚≠ê", callback_data="test_stars_diamonds")],
        [InlineKeyboardButton(text="üî• –¢–µ—Å—Ç TON", callback_data="test_ton_mega")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith("test_"))
async def handle_test_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    test_type = callback.data.replace("test_", "")
    
    if test_type == "stars_speed":
        await send_stars_invoice(callback.message, "speed", "booster", "test_user")
    elif test_type == "stars_diamonds":
        await send_stars_invoice(callback.message, "diamonds", "booster", "test_user")
    elif test_type == "ton_mega":
        await send_ton_invoice(callback.message, "mega", "booster", "test_user")

@dp.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await bot.answer_pre_checkout_query(query.id, ok=True)
    logger.info(f"Pre-checkout approved for: {query.invoice_payload}")

@dp.message(lambda message: message.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload_data = payment.invoice_payload.split('_')
    
    if len(payload_data) >= 4:
        currency, category, item_type, user_id = payload_data[:4]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        item = GAME_ITEMS.get(item_type, {})
        await message.answer(
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
            f"–¢–æ–≤–∞—Ä: {item.get('name', item_type)}\n"
            f"–°—É–º–º–∞: {payment.total_amount} {payment.currency}\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}\n\n"
            f"üéÆ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –≤ –∏–≥—Ä—É
        await notify_game_webhook(user_id, item_type, category, payment)
        
        logger.info(f"Payment successful: {payment.invoice_payload}")
    else:
        logger.error(f"Invalid payload format: {payment.invoice_payload}")

async def notify_game_webhook(user_id: str, item_type: str, category: str, payment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏–≥—Ä—É –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    # –ó–¥–µ—Å—å –±—ã –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –∏–≥—Ä—ã
    webhook_data = {
        "user_id": user_id,
        "item_type": item_type,
        "category": category,
        "amount": payment.total_amount,
        "currency": payment.currency,
        "transaction_id": payment.telegram_payment_charge_id,
        "timestamp": payment.invoice_payload.split('_')[-1] if '_' in payment.invoice_payload else None
    }
    
    logger.info(f"Would send webhook to game: {webhook_data}")
    # import aiohttp
    # async with aiohttp.ClientSession() as session:
    #     async with session.post(WEBHOOK_URL, json=webhook_data) as response:
    #         logger.info(f"Webhook response: {response.status}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ Garena Diamond Bot starting...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")